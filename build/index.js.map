{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import ensurePath from '@wrote/ensure-path'\nimport readDirStructure from '@wrote/read-dir-structure'\nimport makePromise from 'makepromise'\nimport {\n  createReadStream, createWriteStream, lstat, readlink, symlink,\n} from 'fs'\nimport { join, basename } from 'path'\n\n/**\n * Clone a file.\n * @param {string} from Path to the file which to clone.\n * @param {string} to Path to the file where to clone.\n */\nconst cloneFile = async (from, to) => {\n  const rs = createReadStream(from)\n  const ws = createWriteStream(to)\n  rs.pipe(ws)\n  await Promise.all([\n    new Promise((r, j) => {\n      rs.on('close', r).on('error', j)\n    }),\n    new Promise((r, j) => {\n      ws.on('close', r).on('error', j)\n    }),\n  ])\n}\n\nconst cloneLn = async (from, to) => {\n  const target = await makePromise(readlink, from)\n  await makePromise(symlink, [target, to])\n}\n\n/**\n * Clones a directory.\n * @param {string} from Path of the file or directory being cloned.\n * @param {string} to Path to the cloned directory (not its parent!).\n */\nconst cloneDir = async (from, to) => {\n  await ensurePath(join(to, 'path.file'))\n  const { content } = await readDirStructure(from)\n  const pr = Object.keys(content).map(async (k) => {\n    const { type } = content[k]\n    const p = join(from, k)\n    const pt = join(to, k)\n    if (type == 'Directory') {\n      await cloneDir(p, pt)\n    } else if (type == 'File') {\n      await cloneFile(p, pt)\n    } else if (type == 'SymbolicLink') {\n      await cloneLn(p, pt)\n    }\n  })\n  await Promise.all(pr)\n}\n\n/**\n * Clone a file or directory.\n * @param {string} path Path to the file or directory to clone.\n * @param {string} to Path to the directory to contain the file or directory being cloned (not the path to the cloned entity).\n */\nconst clone = async (path, to) => {\n  /** @type {import('fs').Stats} */\n  const s = await makePromise(lstat, path)\n  const b = basename(path)\n  const t = join(to, b)\n\n  if (s.isDirectory()) {\n    await cloneDir(path, t)\n  } else if (s.isSymbolicLink()) {\n    await cloneLn(path, t)\n  } else {\n    await ensurePath(t)\n    await cloneFile(path, t)\n  }\n}\n\nexport default clone"]}